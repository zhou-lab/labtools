#!/bin/bash

## otherwise aliases are not expanded
shopt -s expand_aliases

export BASHRC=/mnt/isilon/zhoulab/labtools/bashrc/chop/bashrc_hpc_zhoulab

# please do not activate anaconda by default, it interferes with R installation.
# add that to your own ~/.bashrc if neede
# alias activate_conda="source ~/software/anaconda/anaconda3_2020/bin/activate"

alias ls='ls --color'
alias rm='rm -i'
alias lc="wc -l"
alias ll="ls -lst"
alias lv="ls -v"
alias rf="readlink -f"
alias parallel="parallel --gnu --progress"
alias du="du -sh"
alias bs=". ~/.bashrc"
alias sr="screen -r"
# alias wget="wget --limit-rate 4M"
alias KYCG=". /mnt/isilon/zhoulab/labtools/bash/20220320_KYCG.sh"

# new folder and file will be writable by the group
umask 002

function dnarev {
    echo $1 | tr ATGC TACG | rev;
}

function labcol {
  awk -F "\t" -v OFS="\t" '{for(i=1;i<=NF;++i){$i=$i"_"i;}print $0;}' $1 | less -S
}

export SCREENRC=/mnt/isilon/zhoulab/labtools/screenrc/screenrc_hp
export AWKPATH=/mnt/isilon/zhoulab/labtools/awkutils
export PATH=~/bin:$PATH
export PATH=/mnt/isilon/zhoulab/labbin:$PATH
export PATH=/mnt/isilon/zhoulab/labpipelines/pipelines:$PATH
export PATH=/mnt/isilon/zhoulab/labsoftware/valgrind/valgrind-3.15/bin:$PATH
export PATH=/mnt/isilon/zhoulab/labsoftware/shared_Renv/shims:$PATH
export PATH=$PATH:/mnt/isilon/zhoulab/labsoftware/NanoMod/NanoMod/bin

export PERL5LIB=/mnt/isilon/zhoulab/labsoftware/perl5lib

alias scp='rsync -Pravdtze ssh'
alias awk='awk -F"\t" -v OFS="\t"'
alias les="less -S"
alias sort="LC_ALL=C sort"

sortbed ()
{
    LC_ALL=C sort -k1,1 -k2,2n -T . $1
}
export -f sortbed

function mkdircd {
  mkdir $1 && cd $_;
}

######################
## UGE job submission
######################
# alias qsubi='qlogin -q interactive.q'
# alias qstatall='qstat -u "*" | less'
# alias qstatallrun='qstat -u "*" -s r | less'
# alias qhost='qhost | less'
# alias qwatch="watch qstat"
# alias qwatchz="watch --color 'bash -c qstatz'"

# alias qsub1="qsub -pe smp 1 -l m_mem_free=5G -l h_vmem=5G"
# alias qsub4="qsub -pe smp 4 -l m_mem_free=5G -l h_vmem=5G"
# alias qsub12="qsub -pe smp 12 -l m_mem_free=5G -l h_vmem=5G"
# alias qsub24="qsub -pe smp 24 -l m_mem_free=5G -l h_vmem=5G"

# function qdelrange {
  # for ((i=$1;i<=$2;i++)); do qdel $i;done
# }

########################
## SLURM job submission
########################
#alias qstat="squeue --me"
#alias qwatch="watch -n 10 squeue --me"
#alias qsubi="srun --mem=20G -c 4 -t 12:00:00 --pty bash"
#alias qsub="sbatch"
#alias qacct="sacct -j"
#alias qhost="sinfo"
#alias qdel="scancel"

alias pbsgen='/mnt/isilon/zhoulab/labpipelines/pbsgen/pbsgen_slurm.py'
alias Squeue='squeue -u $USER -o "%.8i %.4P %.30j %.8u %.2t %.5M %10L %.2D %.2C %.3m %30E %20R"'
alias Swatch='watch -n 10 squeue --me'
alias Scancel='scancel -u $USER'
function Scancel2 { for i in $(seq $1 $2); do scancel -u $USER $i; done; }
## the folllowing runs one day
alias Srun2='srun --mem 40G -c 2 -t 01-00:00:00 --pty bash'
alias Srun4='srun --mem 80G -c 4 -t 01-00:00:00 --pty bash'
alias Srun8='srun --mem 96G -c 8 -t 01-00:00:00 --pty bash'
alias Srun24='srun --mem 110G -c 24 -t 01-00:00:00 --pty bash'
alias Srun72='srun --mem 512G -c 72 -t 01-00:00:00 --pty bash'
alias SrunGPU='srun --mem 400G -c 24 -t 07-00:00:00 -p gpuq --gres=gpu:a100:4 --pty bash'
alias SrunGPU48='srun --mem 400G -c 48 -t 07-00:00:00 -p gpuq --gres=gpu:a100:4 --pty bash'
alias Sinfo='sinfo -e -N -o "%10N  %15C  %10m  %15F %10e %10T %10L %20E %10R"'
Sacct ()
{
	days=${1:-1};
	sacct -L -S now-${days}days -o User,JobID,JobName%40,Partition,NCPUS,ReqMem,MaxRSS,NodeList,Elapsed,Submit,Start,State
}
## sacct job_id for checking finished jobs
## sstat job_id for checking running jobs

############################################
### auto job script generation with pbsgen
############################################
export PBSDIR=/scr1/users/zhouw3/tmp2/pbs
export NAMEROOT=LabJob

## prompt
function prompt {
  local BLACK="\[\033[0;30m\]"
  local BLACKBOLD="\[\033[1;30m\]"
  local GREY="\[\033[00m\]"
  local RED="\[\033[0;31m\]"
  local REDBOLD="\[\033[1;31m\]"
  local GREEN="\[\033[0;32m\]"
  local GREENBOLD="\[\033[1;32m\]"
  local YELLOW="\[\033[0;33m\]"
  local YELLOWBOLD="\[\033[1;33m\]"
  local BLUE="\[\033[0;34m\]"
  local BLUEBOLD="\[\033[1;34m\]"
  local PURPLE="\[\033[0;35m\]"
  local PURPLEBOLD="\[\033[1;35m\]"
  local CYAN="\[\033[0;36m\]"
  local CYANBOLD="\[\033[1;36m\]"
  local WHITE="\[\033[0;37m\]"
  local WHITEBOLD="\[\033[1;37m\]"
  export PS1="$REDBOLD[\t]${SCREENTITLE}$GREY[$GREENBOLD\u@\h $YELLOWBOLD\w$GREY]\$ "
  #export PS1="[$GREENBOLD\u@\h $YELLOWBOLD\w$GREY]\$ "
}

prompt

#PROMPT_COMMAND='/bin/echo -ne "\033k\033\0134\033k[`basename ${PWD}`]\033\0134"'
#case "$TERM" in
#    screen*) PROMPT_COMMAND='echo -ne "\033k\033\0134"'
#esac

###########
### git ###
###########
alias gst="git status" # this interfere with ghostscript program gs

# lazy git
function gll {
  if [ -z "$1" ]; then message="minor, message omitted"; else message="$1"; fi;
  git commit -a -m "$message";
  git push;
}

##############
## folders
##############


#export TMPDIR=/scr1/users/${USER}/tmpdir
#export TEMP=/scr1/users/${USER}/tmpdir
#mkdir -p ${TMPDIR}
## export TEMP=/scr1/users/zhouw3/tmp2

## fzf and z
. /mnt/isilon/zhoulab/labsoftware/z/z.sh

## re-define z with coupling with fzf, you need to install fzf (but needn't
## to invoke its key-binding or auto-completion)
## https://github.com/junegunn/fzf/wiki/examples#z
unalias z
z() {
  if [[ -z "$*" ]]; then        # when there is no argument
    cd "$(_z -l 2>&1 | fzf +s --tac | sed 's/^[0-9,.]* *//')"
  else                          # when there is argument
    if [[ $1 == -* ]]; then
      _z "$@"
    else
      cd "$(_z -l 2>&1 | fzf -q "$@" | sed 's/^[0-9,.]* *//')"
    fi
  fi
}

export _Z_DATA=/mnt/isilon/zhoulab/labsoftware/z/shared_z

export WZSEQ_ENTRY=/mnt/isilon/zhoulab/labpipelines/entry/wzseq.sh
export SLURM_ENTRY=/mnt/isilon/zhoulab/labpipelines/entry/slurm.sh

###################
## show location
###################
## usage:
## s [query]
## s open [query] # directly open
## s cd # cd into the folder containing the file
## s show # show things in finder
## s echo # just echo things in terminal
function s {

  to_open=0
  to_cd=0;
  to_finder=0;
  is_directory=0;
  if [[ $1 == "open" ]]; then
    to_open=1;
    shift;
  fi
  
  if [[ $1 == "show" ]]; then
    to_finder=1;
    shift;
  fi

  if [[ $1 == "cd" ]]; then
    to_cd=1;
    shift;
  fi

  if [[ $1 == "echo" ]]; then
    ## do nothing really, since echo will always be done
    shift;
  fi

  location=$1
  shift;

  if [[ $location =~ ^labj ]]; then
    location=$HOME/zhoulab/labjournal/
  elif [[ $location =~ ^labp ]]; then
    location=$HOME/zhoulab/labprojects/
  elif [[ $location =~ ^labp2 ]]; then
    location=$HOME/zhou_lab/projects/
  elif [[ $location =~ ^re ]]; then
    location=$HOME/repo/
  fi

  ## TODO test if link is pointed to a directory
  ## if link is not given (simple "s"), then use current directory
  if [[ ! -d $location ]]; then
    location="." # $HOME/Dropbox/Documents/
  fi

  pattern="$@"
  if [[ $is_directory -eq 1 ]]; then
    fpath=$(find "$location" -type d | fzf -q "$pattern")
  else
    fpath=$(find "$location" -type f | fzf -q "$pattern")
  fi
  
  if [[ ! -z "$fpath" ]]; then
    echo $(readlink -f $fpath)
    export SHOWLOC="$fpath"
    if [[ $to_open -eq 1 ]]; then
      open "$fpath"
    elif [[ $to_cd -eq 1 ]]; then
      if [[ -d "$fpath" ]]; then
        cd "$fpath"
      else
        cd $(dirname "$fpath")
      fi
    elif [[ $to_finder -eq 1 ]]; then
      open -R "$fpath"
    fi
  fi
}

function cdd {
  if [[ ! -z "$SHOWLOC" ]]; then
    showdir="$(dirname "$SHOWLOC")"
    cd "$showdir"
  fi
}

function updateFOLDERSIZES {
    find -maxdepth 1 -type d | awk 'NR>1' | while read d; do echo -e $(du -h $d)"\t"$(find $d -type f | wc -l); done | sort -k1,1hr | tee FOLDERSIZES
}
