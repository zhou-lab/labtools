#!/bin/bash
# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

alias ls='ls -G'
alias rm='rm -i'
alias lc="wc -l"
alias ll="ls -l"
alias rf="greadlink -f"
alias parallel="parallel --gnu --progress"
alias sort="LC_ALL=C sort"
alias hs="history | sed 's/^ *[0-9]* *//' | tail -r | less -S"
alias wget='wget --no-check-certificate'
alias du="du -sh"
alias R='R --no-save'

function emacs {
  touch $1
  open -a /Applications/Emacs.app $1
}

PS1='\u@\h:\w\$ '

HOME=/Users/zhouw3

export PATH=~/bin:~/tools/circos/current/bin:~/tools/bin/:~/repo/wzlib/bin/:$PATH
export SCREENRC=$HOME/repo/wzlib/screenrc/screenrc_hp
export PYTHONPATH=$HOME:~/repo/wzlib/pyutils
# export PYTHONPATH=$HOME/repo/wzlib/pyutils:$PYTHONPATH:$HOME/pythonlib/lib/python2.7/site-packages/
# /usr/local/lib/python2.7/site-packages/:$HOME/repo/wzlib/pyutils:$HOME/pythonlib/Library/Python/2.7/site-packages/:/usr/local/Cellar/pyqt/4.11.3/lib/python2.7/site-packages/:/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/:$PYTHONPATH
export AWKPATH=$HOME/repo/wzlib/awkutils



# % cpan
# cpan> o conf makepl_arg INSTALL_BASE=/mydir/perl
# cpan> o conf commit
# export PERL5LIB=/home/wzhou1/tools/perltools/lib/perl5:/home/wzhou1/tools/vcftools/vcftools_0.1.11/lib/perl5/site_perl:${PERL5LIB}
export PERL5LIB=${PERL5LIB}:/Users/wandingzhou/tools/bioperl/src/BioPerl-1.6.1
export PERL5LIB=${PERL5LIB}:/Users/wandingzhou/tools/ensembl_api/ensembl/modules
export PERL5LIB=${PERL5LIB}:/Users/wandingzhou/tools/ensembl_api/ensembl-compara/modules
export PERL5LIB=${PERL5LIB}:/Users/wandingzhou/tools/ensembl_api/ensembl-variation/modules
export PERL5LIB=${PERL5LIB}:/Users/wandingzhou/tools/ensembl_api/ensembl-funcgen/modules

alias scp='rsync -Pravdtze ssh'
alias awk='gawk -F"\t" -v OFS="\t"'
alias zcat="gzcat"
alias les="less -S"
alias zles="zless -S"
alias qsuball="find $HOME/htcpbs/ -type f | sort | xargs -I {} qsub {}"
alias qdelall="qstat | grep wzhou | awk '{print $1}' | xargs -I {} qdel {}"

function prompt {
  local BLACK="\[\033[0;30m\]"
  local BLACKBOLD="\[\033[1;30m\]"
  local GREY="\[\033[00m\]"
  local RED="\[\033[0;31m\]"
  local REDBOLD="\[\033[1;31m\]"
  local GREEN="\[\033[0;32m\]"
  local GREENBOLD="\[\033[1;32m\]"
  local YELLOW="\[\033[0;33m\]"
  local YELLOWBOLD="\[\033[1;33m\]"
  local BLUE="\[\033[0;34m\]"
  local BLUEBOLD="\[\033[1;34m\]"
  local PURPLE="\[\033[0;35m\]"
  local PURPLEBOLD="\[\033[1;35m\]"
  local CYAN="\[\033[0;36m\]"
  local CYANBOLD="\[\033[1;36m\]"
  local WHITE="\[\033[0;37m\]"
  local WHITEBOLD="\[\033[1;37m\]"
  # export PS1="$REDBOLD[\t]${SCREENTITLE}$GREY[$GREENBOLD\u@\h $YELLOWBOLD\w$GREY]"'$ '
  # export PS1="$REDBOLD[\t]${SCREENTITLE}$GREY[$GREENBOLD\u@\h $YELLOWBOLD\w$GREY]\$ "
  export PS1="$REDBOLD[\t]$GREY[$GREENBOLD\u@\h $YELLOWBOLD\w$GREY]\$ "
}

# export CDPATH=.:~:..:/tools

prompt

# PROMPT_COMMAND='echo -ne "\033k\033\134\033k${HOSTNAME}[`basename ${PWD}`]\033\134"'
# PROMPT_COMMAND='echo -ne "\033k\033\134\033k[`basename ${PWD}`]\033\134"'
# `basename ${PWD}`]\033\0134"'
# note in mac /bin/echo is different from echo
# the following is super important
# export PROMPT_COMMAND='echo -ne "\033k\033\0134\033k[`basename ${PWD}`]\033\0134"'

# case "$TERM" in
#     screen*) PROMPT_COMMAND='echo -ne "\033k\033\0134"'
# esac


## the following two are the same
function newdoc {
  touch $1
  open $1
}

function touchopen {
  touch $1
  open $1
}

##########################
## grep contents
##########################
## for code
function wzgrep {
  # grep --recursive --color=always "$1" ~/repo/wzprojects/*.{R,py,org,sh} | less -SR;
  # grep --recursive --color=always "$1" ~/repo/wzprojects/* | less -R;
  [[ -z "$1" ]] || ag "$1" ~/repo/wzprojects --pager="less -R"
}

function wzgrep2 {
  [[ -z "$1" ]] || ag "$1" . --pager="less -R"
}

function wzfind {
  find ~/repo/wzprojects/ -name "*$1*" | fzf
}

## for PDF documents, DON'T WORK WELL, TRY SEARCHING IN MENDELEY
function wzgreppdf {
  pattern="$@";
  find ~/Dropbox/Literature -name '*.pdf' -exec pdfgrep "$pattern" {} \;
}

## the following utilize the built-in mac MS Word reader
function wzwriting {
  textutil -stdout -cat txt *.docx
}

###################
## show location
###################
## usage:
## s [query]
## s open [query] # directly open
## s cd # cd into the folder containing the file
## s show # show things in finder
## s echo # just echo things in terminal
function s {

  to_open=0
  to_cd=0;
  to_finder=0;
  is_directory=0;
  if [[ $1 == "open" ]]; then
    to_open=1;
    shift;
  fi
  
  if [[ $1 == "show" ]]; then
    to_finder=1;
    shift;
  fi

  if [[ $1 == "cd" ]]; then
    to_cd=1;
    shift;
  fi

  if [[ $1 == "echo" ]]; then
    ## do nothing really, since echo will always be done
    shift;
  fi

  location=$1
  shift;

  if [[ $location =~ ^wzp ]]; then
    location=$HOME/repo/wzprojects/
  elif [[ $location =~ ^wzl ]]; then
    location=$HOME/repo/wzlib/
  elif [[ $location =~ ^sa ]]; then
    location=$HOME/samplesheets/
  elif [[ $location =~ ^ga ]]; then
    location=$HOME/gallery/
  elif [[ $location =~ ^go ]]; then
    location=$HOME/Google/
  elif [[ $location =~ ^on ]]; then
    location=$HOME/OneDrive/
  elif [[ $location =~ ^gr ]]; then
    location=$HOME/Google/Grant
  elif [[ $location =~ ^dr ]]; then
    location=$HOME/Dropbox/
  elif [[ $location =~ ^pe ]]; then
    location=$HOME/Dropbox/personal/
  elif [[ $location =~ ^do ]]; then
    location=$HOME/Dropbox/Documents/
  elif [[ $location =~ ^re ]]; then
    location=$HOME/repo/
  elif [[ $location =~ ^sp ]]; then
    location=$HOME/Dropbox/Documents/SpreadSheets/
  elif [[ $location =~ ^pa ]]; then
    location=$HOME/Dropbox/Documents/Paper/
  elif [[ $location =~ ^pr ]]; then
    location=$HOME/Dropbox/Documents/Presentation/
  # elif [[ $location =~ ^li ]]; then
  #   location=$HOME/Dropbox/Literature/
  # elif [[ $location =~ ^wr ]]; then
  #   location=$HOME/Dropbox/Documents/Writing/
  fi

  ## TODO test if link is pointed to a directory
  ## if link is not given (simple "s"), then use current directory
  if [[ ! -d $location ]]; then
    location="." # $HOME/Dropbox/Documents/
  fi

  pattern="$@"
  if [[ $is_directory -eq 1 ]]; then
    fpath=$(find "$location" -type d | fzf -q "$pattern")
  else
    fpath=$(find "$location" -type f | fzf -q "$pattern")
  fi
  
  if [[ ! -z "$fpath" ]]; then
    echo $fpath
    export SHOWLOC="$fpath"
    if [[ $to_open -eq 1 ]]; then
      open "$fpath"
    elif [[ $to_cd -eq 1 ]]; then
      if [[ -d "$fpath" ]]; then
        cd "$fpath"
      else
        cd $(dirname "$fpath")
      fi
    elif [[ $to_finder -eq 1 ]]; then
      open -R "$fpath"
    fi
  fi
}

function openf {
  [[ -z "$SHOWLOC" ]] || open "$SHOWLOC"
}

function opend {
  [[ -z "$SHOWLOC" ]] || open -R "$SHOWLOC"
}

function cdd {
  if [[ ! -z "$SHOWLOC" ]]; then
    showdir="$(dirname "$SHOWLOC")"
    cd "$showdir"
  fi
}

# function cdf {
#   [[ -z "$SHOWLOC" ]] || cd "$SHOWLOC"
# }

####################
## VCF tools
####################
function wz_vcffilter {
    vcffile=$1;
    if [[ $3 == "-s" ]]; then
	awk -v threshold=$2 '
(!/^#/){
if($6>threshold) print;
}' $vcffile | sort -k6,6 -nr
    else
	awk -v threshold=$2 '
(!/^#/){
if($6>threshold) print;
}' $vcffile
    fi
}

function wzsum {
  awk -v column=$2 '(NR==1){min=$column;max=$column}{sum += $column; if(min>$column) min=$c\
olumn; if(max < $column) max=$column; }END{print "sum: "sum"\tcount: "NR"\tmean: "sum/NR"\t\
min: "min"\tmax: "max}' $1
}

function wzsum_slow {
  column=$2
  sort -n $1 -k$column,$column | awk -v column=$column 'BEGIN{c=0;sum=0;} {a[c++]=$column; \
sum+=$column;} END{ave=sum/c; if((c%2)==1){median=a[int(c/2)];} else{median=(a[c/2]+a[c/2-1\
])/2;} print "sum: "sum"\tcount: "c"\tmean: "ave"\tmedian: "median"\tmin: "a[0]"\tmax: "a[c\
-1]"\t25%: "a[c/4]"\t75%: "a[c/4*3]}'
}

alias qsubi='qsub -I -q default -l nodes=1:ppn=1'

function dnarev {
  echo $1 | tr ATGC TACG | rev;
}

# eval $(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib)
function getseqh {
  samtools faidx ~/references/hg19/hg19.fa $1
}

function getseqm {
  samtools faidx ~/references/mm10/mm10.fa $1
}

function tv {
    samtools tview $1 /workspace/zchong/clinsek/test_data/hg19.fa
}
function sv {
    samtools view $1 $2 | les
}

function bt {
    bcftools view $1 | les
}

MANPATH=$MANPATH:$HOME/share/man

function wzqsub {
    find ~/pbs/ -type f | sort | sed -n "${1},${2}"p | xargs -I {} qsub {}
}


function mkdircd {
  mkdir $1 && cd $_;
}

### git ###

alias gst="git status"
# alias gu="git pull"
alias gp="git pull"
alias gpu="git push"
alias gc="git commit -am"
# alias ga="git add"

function allgpl {
  for f in ~/repo/*; do
    cd $f;
    git pull
    git commit -am "minor, message omitted"
    git push
  done
}

# lazy git
function gl {

  if [ -z "$1" ]; then message="minor, message omitted"; else message="$1"; fi;
  git commit -a -m "$message";
  git push;
}

PERL_MB_OPT="--install_base \"/Users/wandingzhou/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/Users/wandingzhou/perl5"; export PERL_MM_OPT;

function cntbed {
 cut -f 1-3 $1 | sort | uniq | lc
}

function sortbed {
sort -k1,1 -k2,2n $1
}

## circos
export PATH=~/tools/circos/circos-0.67-7/bin/:$PATH
alias wzseq='. /Users/wandingzhou/repo/wzlib/bash/wzseq.sh'
alias wzutils='. /Users/wandingzhou/repo/wzlib/bash/wzutils.sh'

alias wzmouse='. ~/repo/wzprojects/meth/2016_03_22_mouse_array_figures.sh'

# test -r ~/tools/EMAN2/eman2.bashrc && source ~/tools/EMAN2/eman2.bashrc

export SESAMEHOME="~/.SESAMEDATA"
export WZARD_HOME=/Users/wandingzhou/tools/wzard_data

### source .bashrc
alias sb="source ~/.bashrc"
alias eb="vim ~/.bashrc"

function findc {
  find . -regex '.*.c' -o -regex '.*.h' -exec grep -H "$1" {} \;
}

## Renv
#export PATH="$HOME/.Renv/bin:$PATH"
#eval "$(Renv init -)"

## texlive
export PATH=/usr/local/texlive/2014/bin/x86_64-darwin/:$PATH

# source ~/tools/git-subrepo/.rc

function bedview {
  awk -v target=$2 'BEGIN{match(target, "([^:]*):([0-9]*)-([0-9]*)", a)}($1==a[1] && $2<a[3] && $3>a[2])' $1;
}

function bedsumbases {
  awk '{a += $3-$2;}END{print a}' $1
}

function windows2unix {
  sed "s/
//g" $1
}


########################
## z - jump around
########################
. ~/tools/z/z.sh

## re-define z with coupling with fzf, you need to install fzf (but needn't
## to invoke its key-binding or auto-completion)
## https://github.com/junegunn/fzf/wiki/examples#z
unalias z
z() {
  if [[ -z "$*" ]]; then        # when there is no argument
    cd "$(_z -l 2>&1 | fzf +s --tac | sed 's/^[0-9,.]* *//')"
  else                          # when there is argument
    if [[ $1 == -* ]]; then
      _z "$@"
    else
      cd "$(_z -l 2>&1 | fzf -q "$@" | sed 's/^[0-9,.]* *//')"
    fi
  fi
}

############## FZF ##############
## Wanding Note1:
## if you want autocompletion (triggered by **) and key-binding for C-T
## to me this is not that necessary
## ZFZ is no good since it only supports bash version >= 4 (and most mac
## unfortunately supports only version 3)
## Wanding Note2:
## and you need to put it to bash_profile in mac to have it work properly
# [ -f ~/.fzf.bash ] && source ~/.fzf.bash

function wzcd() {
  cd $(find . -type d | fzf)
}

export GEM_HOME=$HOME/gems
export PATH=$HOME/gems/bin:$PATH
## /Users/zhouw3/.gem/ruby/2.3.0/bin
export PATH="/usr/local/opt/ruby/bin:$PATH"

function dt() {
  date +%Y%m%d
}

function dt2() {
  date +%Y_%m_%d
}

export TRANSVAR_CFG=/Users/zhouw3/Google/20190822_transvar_development/transvar.cfg
export TRANSVAR_DOWNLOAD_DIR=/Users/zhouw3/Google/20190822_transvar_development/transvar.download

## in Linux it can be
## function ppgrep() { pgrep "$@" | xargs --no-run-if-empty ps fp; }
function ppgrep() { pgrep "$@" | xargs ps -fp 2> /dev/null; }

#### python ####
## activate anaconda
source /Users/zhouw3/anaconda3/bin/activate
