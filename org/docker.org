* Basic concepts

Container is a process.
Image is a virtual environment.
You can not alter a process directly. But you can commit it to an
image and alter the image.

* Image
** docker images
List which docker machines are available locally 
** docker rmi <image>
Remove image

** docker commit <container> <username>/<repository>:<tag>
Make image from container/process 
** docker build -t <username>/<repository>:<tag> <directory_of_Dockerfile>
Make image from Dockerfile
** docker pull <image>
Get a copy of public docker
** docker tag sesame zhouwanding/sesame
Rename docker image

* Container
** docker ps
List running containers / processes

*** docker ps -a
List all containers
** docker cp <containerId>:/file/path/within/container /host/path/target
Copy stuff from container path to host path

** docker inspect --format '{{ .NetworkSettings.IPAddress }}’ <container>
Get container IP address
** docker run -itd <image> <command>
Keep a container running at startup

This runs a command inside the container. 
If the <command> is missing, it runs some default ENTRYPOINT
process and exit (unless otherwise specified)

  -i, --interactive     Keep STDIN open even if not attached
  -t, --tty             Allocate a pseudo-TTY
  -d, —detach  Run container in background and print container ID

When we run 
docker run busybox
we didn't provide a command, so the container booted up,
ran an empty command and then exited.

Running the run command with the -it flags attaches us to an 
interactive tty in the container. Now we can run as many 
commands in the container as we want.

** docker start <container>
Resume container (THIS IS A MISNOMER, START actually needs the
container to be run first). This is seldomly used unless you want to
restart the process/container.  docker start <container>

** docker run --rm --it busybox
--rm removes the container after exit 
Shutdown container
This run a container/process from an image

** docker exec -it <name> /bin/bash
Shell into a running container with either of the following

** docker attach <name>
Shell into a running container with either of the following

** docker stop <container>
stop a container process

*** docker stop $(docker ps -a -q)
Stop all containers

** docker rm <container>
Remove a stopped container
*** docker rm $(docker ps -a -q) 
Remove all containers

* Building and modifying the Bioconductor docker
images The BioC Dockerfiles are not directly edited. Instead, for each
biocView, there is a common Dockerfile.in, from which two output files
for release and devel files are generated by running the rake
command. All the creation is controlled by the Rakefile, which will
also take care if any of the dependencies (i.e. the *.in files) have
changed.  E.g. the Dockerfile for the BioC development branch for core
packages is created from src/core/Dockerfile.in and placed into
out/devel_core/Dockerfile.
