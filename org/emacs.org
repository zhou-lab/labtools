#+STARTUP: hidestars
#+STARTUP: overview
#+STARTUP: indent
#+TAGS: memorize(a) mycustom
* installation and customization
** install emacs snapshot
   https://launchpad.net/~cassou/+archive/emacs
** ibus-mode
put other-packages/ibus-0.3.2 into the load-path
then include wanding-ibus.el
and remember to meet the dependency
apt-get install python-xlib
** 安装emacs-snapshot (old)
   use emacs-snapshot
   echo "Emacs.font: Monospace-10" >> ~/.Xresources
   xrdb -merge ~/.Xresources
   put in my .bashrc
   alias emacs='emacs-snapshot'
** install package in emacs 24
   describe the emacs package system
   http://ergoemacs.org/emacs/emacs_package_system.html
   package-list-package
   package-install
** setup emacs python environment
   package:
   pymacs: python-emacs communication interface
   rope-python: python-refactoring
   python-ropmacs
** upgrade to emacs 23.2
   sudo add-apt-repository ppa:ubuntu-elisp/ppa
   sudo apt-get update
   sudo apt-get upgrade
** 外置 color theme
   （注意，emacs内置的color theme已经非常好看了，没有必要再用别的color theme)
   在emacs中有color-theme.el可以调用各种color-theme
   将color-theme.el拷贝到site-lidp目录下，在~/.emacs中加入
   (require 'color-theme');
   (color-theme-snow)
** 外观
   (set-background-color "ivory")
   to view all the colors available: M-x list-colors-display

   good font:
   -adobe-courier-bold-r-normal--12-120-75-75-m-70-iso8859-1

   all setting in one(my standard setting): 
   (setq default-frame-alist
   '( (width . 60)
   ( height . 35)
   ( font . "-adobe_courier-medium-r-normal--14-140-75-75-m-90-iso8859-1")
   (mouse-color . "burlywood")
   (cursor-color . "burlywood")
   (background-color . "dark slate grey")
   (foreground-color . "white")
   )
   )

   M-b,M-f: backward, forward one word
   C-s,C-r: search forward and backward
   M-% old_string [Enter] newstring [Enter]

   remove the tool-bar and menu-bar:
   (tool-bar-mode -1)
   (menu-bar-mode -1)

   
   C-v page down
   M-v page up

   M-< start of document
   M-> end of document

   C-w cut
   M-w copy
   C-y paste

   C-x k kill buffer

   C-x b change buffer to another one

   C-h t see the tutorial
   C-h a [topic] see help about topic
   C-h v see variable

   To repeat:
   C-u [number] [command]
** 长行显示
   1. M-x toggle-truncate-lines	
      切换换行与不换行
   2. M-x cutomize-option
      输入truncate-partial-width-windows
      改参数为off, then save for future sessions
   3. M-x auto-fill-mode
      也是换行，不过是在内容中插入回车
** set key bindings
   http://xahlee.org/emacs/keyboard_shortcuts.html
   (global-set-key (kbd "s-SPC") 'set-mark-command)
   Set super-space to set mark.
** customize the font:
   how to find avaialble fonts in the system?
   1. xlsfonts | grep 'wenquanyi'
   2. fc-list

   add in .emacs file:
   (set-default-font "-adobe-courier-medium-r-normal--18-180-75-75-m-110-iso8859-1")

   or this:
   (set-default-font "-adobe-courier-medium-r-normal--14-140-75-75-m-90-iso8859-1")
   C-M-s regular expression search
   M-x check-parens	find unbalanced parantheses and un balanced stirng quotes.
   M-x show-paren-mode	show balanced the parantheses
   M-x glasses-mode
   C-c C-d	toggle hungry-delete on/off in c/c++ mode
** how to customize variable
M-x customize-variable [RET] [your variable] [RET]
to view the content of a variable
C-h v [your variable]
* basic editting
** select code block as marked by parentheses
Mark code block in emacs C-M-u C-M-space
** change tab to space
(setq-default indent-tabs-mode nil)
C-h x
M-x untabify
** add ChangeLog
C-x 4 a edit change log
** make bigger font size in emacs
C-x C-+ and C-x C--
or
C-x C-= and C-x C-- (better)
** moving around
   jump to matched parenthesis: C-M-f / C-M-b
   C-x C-v <RET>  reload a file
   M-= count words (word count in region)
   M-q command-fill-paragraph
   M-x LaTeX-fill-environment
   M-x LaTeX-fill-buffer
   M-x fill-region
   C-u 100 C-x f # set the fill-column
   C-x f <ret> 100 <ret> # same as above
   M-x set-fill-column # same as C-x f
   M-g g 20 go to line 20
   M-r move point to the center of the screen
   M-x goto-char N move point to buffer position N, not every useful since it's counted from beginning of the buffer
   M-i tab-to-tab-stop insert spaces or tabs to next defined tab-stop column
   M-x edit-tab-stops to edit the list of columns at which there are tab stops.
   C-u 0 C-l 	scroll current line onto the top of the window
   C-u 0 C-l	scroll current line 5 lines from the bottom
*** how to move around brackets/parentheses
    C-M-n     Move forward over a parenthetical group 
    C-M-p     Move backward over a parenthetical group 
    C-M-f     Move forward over a balanced expression
    C-M-b     Move backward over a balanced expression
    C-M-k     Kill balanced expression forward
    C-M-SPC   put the mark at the end of the sexp.
*** how to divide a window
    C-x 2
    C-x 3
*** how to move to the start/end of a function
   C-M-a start of the defun block
   C-M-e end of the defun block
** 小快捷键
   C-x i insert file
   C-t 把ab换成ba

   q exit the *help* buffer
   C-M-n go to the next )
   C-M-p go to the previous (
   <f3> <f4> defines marcro
   可以设定一系列键序列，比如
   <f3> C-a M-f 12 C-e M-b 34 <f4>
   <f3> signals the start of definition
   <f4> signals the end of definition
   to call the macro, use <f4> again
   <f3> can insert counter after the definition of <f3>, for example:
   <F3> C-a <F3> . <SPC> <F4>
   the second <f3> means insert counter, the first <f3> means start of macro definition and the <f4> means the end of definition.
** grep
   grep current directory
   M-x grep <RET>
   grep -nH -e 'something to find' *
** search & replace:
   M-% STRING <RET> NEWSTRING <RET>
   <SPC>	   confirm replacement
   <DEL>	   skip the occurrence
   ,	   replace temporarily
   <RET>	   exit without doing any more replacements
   !	   replace all the remaining without asking again
   M-x replace-string	global string replacement
*** how to list all matching lines
    M-x list-matching-line
*** how to search the work begging from the curser
C-s C-w search the word beginning from the curser
*** 正则表达式搜索
    C-M-S isearch-forward-regexpsearch regular expression
    C-M-% query-replace-regexp
    M-x replace-regexp
    [A-Z][A-Z][A-Z]
    \&_eq
    M-x query-replace
    <Spc> to replace
    <Del> to skip
    M-x query-replace: y AND n
*** search several files
    C-x d then type directory path, mark files you want using 'm'('u' to unmark), then press 'Q'(which invokes dired-do-query-replace-regexp)
** delete
*** how to delete whole words in one key
M-d brutally-kill-word
*** how to delete until the beginning of the line :memorize:
C-0 C-k kill to the beginning of the line
*** how to delete until the next char	:memorize:
M-z char zap-to-char	删除至下一个char出现
If your prefix is three and the specified character
is `x', then you will delete all the text up to and including the third
next `x'.  If you do not set a prefix, then you delete all the text up
to and including the specified character, but no more.
 
*** how to delete extra blank lines	:memorize:
   C-x C-o delete-blank-lines  删除多余的空行
*** how to delete until the end of the word
   M-d kill-word
*** how to delete until the end of the line
   C-k kill-line
*** how to delete all whitespace lines
    M-x flush-lines RET ^\s-*$ RET
*** how to delete all blank lines
    M-x flush-lines RET ^$ RET
*** how to delete lines matching a pattern
    M-x delete-matching-lines
*** how to delete lines not matching a pattern
    M-x delete-non-matching-lines
*** how to kill the entire line
   C-S-backspace  kill-whole-line
   rebound to M-i
*** how to delete until the beginning of the word
   M-<del> backward-kill-word
   C-backspace    backward-kill-word
   M-backspace    backward-kill-word
*** how to delete whitespaces between two words?
    M-\   join-two-words
*** how to delete extra whitespaces between two words?
    M-SPC just-one-space
*** how to delete trailing whitespace
    M-x   delete-trailing-whitespace
*** kill-ring and earlier yanks
you can retrieve earlier yanks by first yank using C-y and then replace the yank by M-y, perform M-y multiple times loops back the kill ring
or if you remember the location of the desired yank in the kill ring, you can do C-u [location] C-y
you can display the content of kill-ring by C-h v kill-ring
** transpose
*** how to switch the order of two sentences
    transpose-sentences
*** how to switch the order of two paragraphs
    transpose-paragraphs
** mark
*** how to mark (select) a whole line :memorize:mycustom:
C-' select-current-line
*** how to mark paragraph		:memorize:
M-h mark paragraph
*** how to mark a function		:memorize:
C-M-h mark defun
*** how to mark whole page/buffer
C-x C-p mark-page
C-x h mark-whole-buffer
*** how to mark whole word
M-@ mark-word
*** how to swap mark and cursor		:memorize:
C-x C-x cua-exchange-point-and-mark
*** how to jump over the mark ring
C-u C-SPC jump over the mark ring, type once, jump to the recent marker. type twice, jump to the second recent marker. return to the previous place.
** autocomplete
   M-\ dabbrev-expand  (completion)
   lisp-complete-symbol (unclear)
** indentation
   C-x Tab indent rigidly
   tab     indent
   C-j     newline-and-indent
   C-M-\   indent-region
*** auto indent (bind newline-and-indent to RET
    (add-hook 'lisp-mode-hook '(lambda ()
    (local-set-key (kbd "RET") 'newline-and-indent)))
*** auto indent (another way)
    (defun set-newline-and-indent ()
    (local-set-key (kbd "RET") 'newline-and-indent))
    (add-hook 'lisp-mode-hook 'set-newline-and-indent)

** 矩形操作 rectangular editting (CUA mode)
*** how to copy/paste a rectangle
C-<RET> enter the CUA mode
use mouse left key to set the start of the rectangle.
*** how to copy/paste a rectangle in the old fashioned way
    select the region as normal, and then use C-x r k to kill the region in a rectangular way
    k (for 'kill')
** buffer management:
   o: open in another window, cursor in that window
   C-o: open in another window, cursor remains

   M-x goto-line [Enter] [Number]	    go to line number [Number]
   C-x C-w [Filename]      save as [Filename]
** sorting
   M-x sort-lines
** undo/redo
   C-x u	advertised-undo
   C-/   	command-redo
   C-x z   repeat (more z to repeat more)
   To redo, type any character then do undo twice
** case change
   M-x upcase-initials-region
   M-x upcase-region
   M-x downcase-region
   M-l convert the remaining characters in the word into lowercase
   M-u convert the remaining characters in the word into uppercase
   M-c  capitalize-word 单词首字母大写
   C-x C-l downcase-region
   C-x C-u upcase-region
** add prefix to lines (such as # and //)
   mark the region, then do 'M-x string-rectangle' (C-x r t), then type what you want to insert.
   Or using M+;, note this command is different when it is used without marking the region.
** other
   M-r swap(transpose) words

** emacs 鼠标操作
   B1 is left key, B2 is middle key and B3 is right key
   B1       这一命令将设置插入点位置；拖动鼠标左键以设置区域。
   B1-B1    这一命令标记一个单词。
   B1-B1-B1 这一命令标记一行。
   B2       这一命令将召回(yank)文本。
   B3       这一命令会设置并突出显示区域，然后无需删除就将其放在 kill 缓冲区中。如
   某个区域已经被突出显示并设置，该区域的末尾将移动到您单击的位置。
   B3-B3    这个命令将突出显示区域，然后删除它。如果某个区域已经被突出显示并设置，区域的末尾将移动到您单击的位置，此后该区域将被删除。
** spell check
   ispell-buffer
   ispell-region
   ispell-string
   ispell-word
   r  Enter a new spelling by hand
   Spacebar Leave the word unchanged
   a Accept this spelling for all buffers during the current editing session only
   i Accept this spelling from now on, adding it to your personal dictionary in your home directory                                                                 
   q Quit the spell checker
   X Halt spell checking at current location so that later it will (Shift-x)  restart there.
** pass argument
*** method 1: M-3 M-x something
*** method 2: C-u 3 M-x something
** cua mode
   http://emacs-fu.blogspot.com/2010/01/rectangles-and-cua.html
   rectangule(rectangular) selection
** autopair
   http://emacs-fu.blogspot.com/2010/06/automatic-pairing-of-brackets-and.html
** word count M-=
1. Select a region.
2. Run M-=, or M-| wc for older versions of emacs.
3. See the count of lines, words, and characters, in the mode-line.

** insert time stamp in emacs                                     :memorize:
C-u M-! date
or with YASnippet
time<tab>

** others
*** how to revert the buffer to the last auto-saved state
    revert-buffer
* major editting modes
** ESS mode
   :PROPERTIES:
   :VISIBILITY: children
   :END:
*** start R session
M-x R
*** submit code to R console
C-c C-j ess-eval-line submit region to R console
C-c C-c ess-eval-fun/paragraph-and-step
C-c M-j ess-eval-line-and-go
C-c C-f ess-eval-function
C-c M-f ess-eval-function-and-go
C-c C-r ess-eval-region
C-c M-r ess-eval-region-and-go
C-c C-b ess-eval-buffer
C-c M-b ess-eval-buffer-and-go
C-c C-n ess-eval-line-and-step
C-c C-p submit paragraph to R console
*** use Roxygen to document function
C-c C-o
*** look for documentation
?galaxies
press 'n' to jump to next section
press 'p' to jump to previous section
*** Fix slow code sending
If so, this is a long-standing bug. Add:
(setq ess-eval-visibly-p nil)
** helm mode
   :PROPERTIES:
   :VISIBILITY: children
   :END:
*** helm-recentf M-r
** org mode
   :PROPERTIES:
   :VISIBILITY: children
   :END:
   http://orgmode.org/org.html
*** the basics

**** how to mark entire subtree      :memorize:
M-h org-mark-element
mark the element, or the paragraph beneath

C-c @ org-mark-subtree
the difference between org-mark-subtree and org-mark-element is that when under a heading, org-mark-subtree still mark the subtree while org-mark-element mark only the paragraph.
**** how to move around the headings
C-c C-n go to next visible heading
C-c C-p go to previous visible heading
C-c C-u go to the direct upper level heading
C-c C-f go to next heading of the same level
C-c C-b go the previous heading of the same level
C-u C-c C-w jump to heading
C-c C-j org-goto, jump to a different location without affecting the current visibility. Note that <right> also makes the selection (same as <RET>)
**** how to show only subheadings of the current heading
C-c C-k show-branches
**** how to show direct children only
C-c <TAB> show-children
**** how to show the subtree in an indirect buffer
an indirect buffer is a mirror to the original buffer (or the parent buffer), changes made in the indirect buffer will be in effect in the original buffer.
C-c C-x b org-tree-to-indirect-buffer
**** how to show only the subtree
C-x n s org-narrow-to-subtree
C-x n w widen buffer and remove narrowing
**** how to turn a normal line into a heading
C-c * org-toggle-heading
it also turns a heading into a normal line
it also works on a region
**** how to insert heading respect content structure
Ctrl-return create an entry at the end of the current entry
org-insert-heading-respect-content
**** how to copy only visible, but not the hided content in a region
C-c C-x v copy the visible text in a region into the kill ring
**** how to show headings upto a certain depth
C-u 2 S-<TAB> shows headings upto level 2
---
When `S-<TAB>' is called with a numeric prefix argument N, the
CONTENTS view up to headlines of level N will be shown.  Note that
inside tables, `S-<TAB>' jumps to the previous field.
---
**** how to go back to the startup visibility
C-u C-u <TAB> org-set-startup-visibility
**** how to adjust order of the current heading
     M-<UPPER>/<DOWN>      adjust order
**** how to adjust heading levels
M-<LEFT>/<RIGHT>      adjust level
**** how to show all the content including the drawers
C-u C-u C-u <TAB> show-all
**** how to use unordered list
start with + and -
**** how to use descriptive list
Start with -, +, or * and followed by ::
for example,
Matlab is a funny language. 
 - Scope :: Scope doesn't work as expected, and messes everything up
   when loops mix variables up in recursive functions.
 - Namespaces :: You wish. 
 - Header Files :: Nope.
**** how to set the startup visibility for all files?
(setq org-startup-folded 'content)
options are: overview, content, showall
**** how to set the startup folding/indent?
(setq org-startup-indented t)
**** how to set the startup visibility for one certain file?
#+BEGIN_EXAMPLE
#+STARTUP: overview
#+END_EXAMPLE
possible values are overview, content, showall, showeverything
**** org mode clean view in org-indent-mode                    :emacs:org:
(org-indent-mode)
or #STARTUP: indent

*** property
C-c C-x p org-set-property
*** markup
You can make words *bold*, /italic/, _underlined_, =code= and ~verbatim~, and, if you must, ‘+strike-through+’. Text in the code and verbatim string is not processed for Org mode specific syntax; it is exported verbatim.
*** edit code block
http://orgmode.org/manual/Working-With-Source-Code.html#Working-With-Source-Code
#+begin_src ruby -n
  ,require 'date'
  ,"This file was last evaluated on #{Date.today}"
#+end_src
**** how to edit code blocks
C-c ' org-edit-src-code
**** how to insert begin_src and end_src easily?
use easy template
type '<s', then <TAB>.
s    #+begin_src ... #+end_src 
e    #+begin_example ... #+end_example
q    #+begin_quote ... #+end_quote 
v    #+begin_verse ... #+end_verse 
c    #+begin_center ... #+end_center 
l    #+begin_latex ... #+end_latex 
L    #+latex: 
h    #+begin_html ... #+end_html 
H    #+html: 
a    #+begin_ascii ... #+end_ascii 
A    #+ascii: 
i    #+index: line 
I    #+include: line 
**** how to turn on code block highlighting?
(setq org-src-fontify-natively t)
*** links
C-c C-o        org-open-at-point                                  
[[link][description](another])  add link manually 
[[link](another])
If you place the cursor at the beginning or just behind the end of the displayed text and press <BACKSPACE>, you will remove the (invisible) bracket at that location.  This makes the link incomplete and the internals are again displayed as plain text.

C-c l        org-store-link
C-c C-l      org-insert-link                                    
If there is already a link at point, this command will allow you to edit link
and description parts.
C-u C-c C-l  select file so that a link to the file is inserted 
**** how to set default application that handles a system link?
customize the variable org-file-apps, look at the documentation of the variable, for example and options available.
**** how to set the default application for pdf?
C-h v org-file-apps
if org-file-apps has pdf associated with default, then
edit your ~/.mailcap file
add 
application/pdf; /usr/bin/evince %s
*** tags
**** general tags
***** how to insert tags?
C-c C-c  up and down arrow 可用来使用已有的tag。
C-c C-q  set tag for the current entry
you can also use S-<right> / S-<left> to set TODO
***** how to search tags?                                      :memorize:
C-c \ 搜索标签
C-c / / use regular expression to search tag
***** how to remove tag filtering?                             :memorize:
shift-tab
***** how to remove temporary highlighting
C-c C-c 
**** todo list
***** how to set a todo tag
C-c C-t 设置 TODO DONE 或空白
S-<right> / S-<left>
Select the following/preceding TODO state, similar to cycling.
***** how to show a local todo sparse tree from the current org file? :memorize:
C-c / t org-show-todo-tree
***** how to show a global todo sparse tree from all the agenda files?
C-c a t org-todo-list
***** how to do an overview of subtasks for each heading
put [/] or [%] after each heading, updated each time TODO status of a child changes or when pressing "C-c C-c" on the cookie.
***** how to add a todo heading?
S-M-<RET>             org-insert-todo-heading
***** how to change the default todo seq?
[NOSPACE]#+SEQ_TODO: TODO(t) STARTED(s) WAITING(w) APPT(a) RESULT(r) | CANCELLED(c) DEFERRED(d) FINISHED(f)
or
[NOSPACE]#+SEQ_TODO: TODO TEST DONE
or
[NOSPACE]#+SEQ_TODO: TODO(T!) | DONE(D@)3  CANCELED(C@/!)
！：切换到该状态时会自动增加时间戳
@ ：切换到该状态时要求输入文字说明
如果同时设定@和！，使用“@/!”
用“|”分隔未完成状态和已完成状态。未完成状态在查询待办事项时会列出。

如果希望设定所有.org文档的默认任务状态，需要在.emacs配置文件中定义。 上面的任务状态在配置文件中的等效设置为：
#+BEGIN_SRC elisp
  (setq org-todo-keywords
        '((sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
          (sequence "TODO(T!)" "|" "DONE(D@)3" "CANCELED(C@/!)")
          ))    
#+END_SRC

***** how to select a TODO keywords using completion?
C-u C-c C-t org-todo
With C-u prefix arg, use completion to determine the new state.
**** priority tag
***** how to set the priority tag?
C-c , org-priority
S-<up> org-priority-up
S-<down> org-priority-down
**** checkbox
***** how to set a checkbox?
- [ ] here's a checkbox. it has to be in a list
***** how to toggle a checkbox?
C-c C-c

*** agenda
**** how to view and change agenda-files?
the agenda files are stored in the variable org-agenda-files
so C-h v org-agenda-files
use C-c [ to add current file into this list
use C-c ] to remove current file into this list

To customize, M-x customize-variable => org-agenda-files
**** how to move around in an agenda dispatcher?
n org-agenda-next-line
p org-agenda-previous-line
**** how to go to the original location of the item?
<SPC> or mouse-3 (right click) display the location in the other window but leaving the cursor in the agenda
<TAB> or mouse-2 (middle click) move the cursor to the location in the other window
L display original location (leaving the cursor in agenda) and recenter that window to the location.
<RET> go to original location and close other windows (including the agenda)
F toggle follow mode.
**** how to create an agenda view?	:memorize:
C-c a a create a calendar-like agenda
**** how to create a list of all todo items (a global todo list)? :memorize:
C-c a t create a list of all todo items
**** how to keep the global todo list short?
   - Some people view a TODO item that has been _scheduled_ for
     execution or have a _deadline_ (*note Timestamps::) as no longer
     _open_.  Configure the variables
     `org-agenda-todo-ignore-scheduled',
     `org-agenda-todo-ignore-deadlines',
     `org-agenda-todo-ignore-timestamp' and/or
     `org-agenda-todo-ignore-with-date' to exclude such items from the
     global TODO list.

   - TODO items may have sublevels to break up the task into subtasks.
     In such cases it may be enough to list only the highest level TODO
     headline and omit the sublevels from the global list.  Configure
     the variable `org-agenda-todo-list-sublevels' to get this behavior.

     (setq org-agenda-todo-list-sublevels nil)

**** how to create a list of all matching headlines :memorize:
C-c a m create a list of headlines matching a TAGS expression
for example, you can do

#+BEGIN_QUOTE
C-c a m paper
#+END_QUOTE

to show a list of papers.
**** how to store searches
     (setq org-agenda-custom-commands
           '(("w" todo "WAITING")
             ("W" todo-tree "WAITING")
             ("u" tags "+boss-urgent")
             ("v" tags-todo "+boss-urgent")
             ("U" tags-tree "+boss-urgent")
             ("f" occur-tree "\\<FIXME\\>")
             ("h" . "HOME+Name tags searches") ; description for "h" prefix
             ("hl" tags "+home+Lisa")
             ("hp" tags "+home+Peter")
             ("hk" tags "+home+Kim")))

The example above will therefore define:

`C-c a w'
     as a global search for TODO entries with `WAITING' as the TODO
     keyword

`C-c a W'
     as the same search, but only in the current buffer and displaying
     the results as a sparse tree

`C-c a u'
     as a global tags search for headlines marked `:boss:' but not
     `:urgent:'

`C-c a v'
     as the same search as `C-c a u', but limiting the search to
     headlines that are also TODO items

`C-c a U'
     as the same search as `C-c a u', but only in the current buffer and
     displaying the result as a sparse tree

`C-c a f'
     to create a sparse tree (again: current buffer only) with all
     entries containing the word `FIXME'

`C-c a h'
     as a prefix command for a HOME tags search where you have to press
     an additional key (`l', `p' or `k') to select a name (Lisa, Peter,
     or Kim) as additional tag to match.
**** how to create a timeline view for the current buffer
C-c a L
**** how to filter by TAG in agenda view?
/ <TAB> your tag name
/ / remove filtering
**** how to restrict the agenda to current subtree
C-c C-x < restrict the agenda to current subtree
C-c C-x > remove the restrict of subtree
**** how to refresh agenda list
     r
**** others
      | j     | org-agenda-goto-date             |
      | km    | mark the entry for action        |
      | kd    | set the deadline                 |
      | ks    | schedule the marked entry        |
      | /     | filter by                        |
      | //    | filtered by nothing (reset view) |
      | space | display in another window        |

*** time and date
**** how to clock your work time?
C-c C-x C-i  clock-in
C-c C-x C-o stop the clock
C-c C-x C-x cancel the current clock
**** how to recompute the time interval?
recompute the time range after the time stamp is manually changed
C-c C-y org-evaluate-time-range
C-c C-c same as above
**** how to resolve idle time?
this happens when you exit emacs and forget to clock out.
how to handle dangling clock time?
     |---+-----------------------------|
     | k | keep time                   |
     | K | keep time and clock out     |
     | s | keep none                   |
     | S | keep none and clock out     |
     | C | cancel the clock altogether |
     |---+-----------------------------|
**** how to add time stamp?		:memorize:
C-c . active time stamp, only date
C-c ! inactive time stamp, only date
C-u C-c . like C-c . but with time
C-u C-c ! like C-c ! but with time
**** how to adjust an existing time stamp? :memorize:
put your cursor over the time stamp
S-<left> org-timestamp-down-day
S-<right> org-timestamp-up-day
S-<up>  org-timestamp-up
S-<down> org-timestamp-down-down
**** how to schedule?
C-c C-s arrange time
**** how to set deadline?
C-c C-d set deadline
**** how to set a countdown timer
C-c C-x ; org-timer-set-timer
**** how to display a summary of time spent
C-c C-x C-d org-clock-display display time summaries for each subtree
**** how to input date and time in the calendar buffer?
     C-c . add time stamp
      |--------------------+----------------------------------|
      | 3-2-5              | 2003-02-05 Wed                   |
      | 14                 | 2010-04-14 Wed                   |
      | Fri                | nearest Fri                      |
      | sep 15             | 2010-09-15 Wed                   |
      | 12:45              | 2010-03-18 Thu 12:45             |
      | 22 sept 0:34       | 2010-03-22 Mon 00:34             |
      | w4                 | ISO week for of the current year |
      | 2012 w4 fri        | Friday of ISO week 4 in 2012     |
      | 2012-w04-5         | same as above                    |
      |--------------------+----------------------------------|
      | +0                 | today                            |
      | .                  | today                            |
      | +4d                | four days from today             |
      | +4                 | same                             |
      | +2w                | two weeks from today             |
      | ++5                | five days from default date      |
      | +2tue              | second Tuesday from now          |
      | > / <              | scroll calendar by one month     |
      | S-<right>/<left>   | one day forward / backward       |
      | S-<down>/<up>      | one week forward / backward      |
      | M-S-<right>/<left> | one month forward / backward     |
      |--------------------+----------------------------------|
**** how to compute effort
this is a manual estimate of time to spend, only useful if you use column view
to see it juxtoposed with the real time spent
C-c C-x e  set effort
C-c C-x C-e update effort to spend
**** a relative timer
     |---------------+--------------------------------|
     | C-c C-x .     | start a relative timer         |
     | C-c C-x -     | insert a current relative time |
     | M-<Ret>       | insert a new timer item        |
     | C-c C-x ,     | pause the timer, or continue   |
     | C-u C-c C-x , | stop the timer                 |
     | C-c C-x 0     | set the timer to 0             |
     |---------------+--------------------------------|

*** tables
    注：在此用\代替|
    由于中文显示的关系，org-mode中的table只支持等宽字体，应此需选用文泉驿正黑等宽, 或者尽量不要在表格中使用汉字。
    |-------------------+--------------------------------------------|
    | C-c \vert             | org-table-create-or-convert-from-region    |
    | Tab               | next cell                                  |
    | org-table-create  | create table from scratch (default is 5x2) |
    | S-Tab             | previous cell                              |
    | Ret               | next row                                   |
    | org-table-align   | align a region of the table                |
    | org-table-convert | convert a csv region to a table            |
    | C-u C-c \vert         | force the comma as a field separator       |
    | C-u C-u C-c \vert     | force TAB as a field separator             |
    | M-<right>         | move column to the right                   |
    | S-M-<down>        | insert a row above                         |
    | S-M-<right>       | insert a column left                       |
    | S-M-<left>        | delete the column                          |
    | S-<Ret>           | copy down the above row                    |
    | M-<down>          | move the row down                          |
    | org-table-export  | export to csv, latex, tsv ...              |
**** how to insert special characters like | (\vert)
     type "\ vert" (with no space inside the quotation)
     if "\ vert" is not automatically converted to \vert, call org-toggle-pretty-entities
     it toggle the composition display of entities as UTF8 characters.
**** restrict the visible part of a column
     | <10>       | <15>            |
     | A ver wide cell | Another very very wide cell |
*** column view
**** how to switch on column view?
     C-c C-x C-c    switches the column view on  
     q            switches the column view off 
*** archive
the default archive location is the current file + '_archive'
To configure the archive location, #+ARCHIVE: %s_done::
or specify a :ARCHIVE: in the entry as a special drawer

C-c C-x C-s	archive the subtree to org-archive-location 

C-c $	same as above

C-u C-c C-x C-s		check if there are TODO, then archive       
*** export an org file
    M-x org-export-as-ascii
    M-x org-export-as-html
** ido mode
   ido mode is a built-in mode
   to enable ido mode: (ido-mode t)
   http://www.emacswiki.org/cgi-bin/wiki/InteractivelyDoThings
   C-s, C-r move in the list
   
** imenu mode
** occur mode
   list-matching-lines (this is a alias to occur)
   delete-matching-lines (this is a alias to flush-lines)
   delete-non-matching-lines (this is a alias to keep-lines)
   sort-lines
   sort-numeric-fields
   reverse-region
   highlight-lines-matching-regexp
** auctex mode
   C-c TAB    go to manual page
*** install
    注意auctex需要另外安装，否则没有preview等功能。
*** basic operations
    C-c C-v tex-view
*** auto insertion
    C-c C-s      insert \section, \subsection,\chapter...
    C-c ]        insert close environment '\end'
    C-u C-c C-e  change environment
    
    C-c RET      TeX-insert-macro 
    insert '\emph{}' style in-line environment
    insert '\ref{}' style environment
    
    C-c C-m      TeX-insert-macro (the same as C-c RET)
    C-c C-e      insert \end for unmatched \begin                            
    C-c C-c      compile, view, ...                                          
    C-c C-j      add \item                                                   
*** marking
    C-c . (LaTeX-mark-environment) mark current environment
    C-c * (LaTeX-mark-section) mark current section/subsection
    C-M-S f / C-M-S b when put on a bracket can mark the whole bracketted region
*** insert font-specifier
    C-c C-f C-d  delete innermost font specifier 
    C-c C-f C-r  \textrm                         
    C-c C-f C-i  \textit                         
    C-c C-f C-e  \emph                           
    C-c C-f C-t  \texttt                         
*** setup external program for viewing pdf
**** add acroread to our list of commands
     (add-to-list 'TeX-command-list '("Acroread" "acroread %s.pdf" TeX-run-silent nil nil))
**** add evince to our list of commands
     (add-to-list 'Tex-command-list '("Evince" "evince %s.pdf" Tex-run-silent nil nil))
**** set default viewing method
     (setq-default TeX-command-Show "Evince")
     C-c C-t C-p:	(setq Tex-view-format "pdf")
*** comment
    C-c ;	comment out current region
    C-c %	comment out current paragraph   :review:
    C-u C-c %	uncomment current paragraph   :review:
*** folding source display
    Tex-fold-mode
    C-c C-o C-b hide all items in buffer
    C-c C-o C-r hide all items in region
    C-c C-o C-p hide all items in paragraph
    C-c C-o b show all items in buffer
    C-c C-o C-f toggle folding mode
*** preview
    C-c C-p C-d 预览全篇
    C-c C-p C-c C-d 解除预览全篇
    C-c C-p C-r preview region
    C-c C-p C-c C-r clear preview region
    C-c C-p C-p preview point
    C-c C-p C-c C-p clear preview point
*** table
    M-x align-current # this aligns the table, most time it becomes better.
*** reftex
    C-c = show TOC
    C-c - re-enter TOC from the position of the cursor
    C-c (  create a unique label
    C-c )  ref label
    :useful: C-c [ # \cite
    g     # refresh list
**** the TOC mode
     <SPC> Show the corresponding location in another window
:useful: <TAB> Goto the location in another window.
     N z jump to section N
     f follow mode, location update as you move in toc
     k kill toc
     g update buffer, doesnt rescan document
     r update buffer, does rescan document

** remember mode
   start by M-x remember
   C-c C-c file the remember
** docview mode

** view mode:
   | q      | quit viewing the file(no buffer exist after q)   |
   | C-j    | scroll forward one line(LFD)                     |
   | y      | scroll back one line                             |
   | <SPC>  | scroll forward a window                          |
   | <DEL>  | scroll backward a window                         |
   | ?      | list the command in view-mode                    |
   | <      | move to the beginning of the file                |
   | >      | move to the end of the file                      |
   | d      | scroll forward "half page size" lines.           |
   | u      | scroll backward "half page size" lines.          |
   | =      | print current line number.                       |
   | s      | forward incremental search                       |
   | r      | reverse incremental search                       |
   | E      | exit view mode(you can edit the file after this) |
** outline mode (不推荐使用， 用org-mode)
*** outline-minor mode
    use C-c @ instead of C-c as prefix
*** show and hide
    C-c C-c	       	hide-entry
    C-c C-e		show-entry
    C-c C-t		hide-body
    C-c C-a		show-all
    C-c C-d		hide-subtree
    C-c TAB/C-c C-i	show-children
    C-c C-k		show-branches
    C-c C-l		hide-leaves
    C-c C-s		show-subtree
*** navigation
    C-c C-p		outline-next-visible-heading
    C-c C-n		outline-previous-visible-heading
    C-c C-u		outline-up-heading
    C-c C-f		outline-forward-same-level
    C-c C-b		outline-backward-same-level
    C-q <Tab>         insert a tab without indent
* elisp
** elisp basics
   执行lisp代码：Ctrl+x Ctrl+e
   单行函数注释Alt+x describe-function (Ctrl+h f)
   完整注释Alt+x elisp-index-search
    wenbinhome.blogspot.com/2007/07/elisp.html
    http://jianlee.ylinux.org/Computer/Emacs/elisp.html
    http://www.laihj.net/2010/01/elipsemacslisp-basi/
    http://docs.huihoo.com/homepage/shredderyin/emacs_elisp.html
    C-j execute the s-statement
    C-x C-e eval-last-sexp execute the s-statement with global key-binding
    (message "string"): function return a string in the minibuffer
    (defun function-name (argument-list)
    "document string"
    body)
    To run a function:
    (function-name arguments-list)

(setq aaa '(something (+ 1 1)))
*** hello world
(defun hello-world (name)
  "Say hello to user whose name is NAME."
  (message "Hello, %s" name))

*** how to print?
   (message "hi")
   (message "Her age is: %d" 16)
   (message "Her name is: %s" "Vicky")

*** the difference between return and side effect of the message function
Note that when you call the function `multiply-by-seven', the
message is printed without quotes, but when you call `message', the
text is printed in double quotes.  This is because the value returned by
`message' is what appears in the echo area when you evaluate an
expression whose first element is `message'; but when embedded in a
function, `message' prints the text as a side effect without quotes.
*** what's a list? and how is a list interpreted
a list is something like the following:
'(rose violet daisy buttercup)
note that the "'" is very important

First, it looks to see whether there is a quote before the list; if there is, the interpreter just gives us the list.  On the other hand, if there is no quote, the interpreter looks at the first element in the list and sees whether it has a function definition.  If it does, the interpreter carries out the instructions in the function definition.  Otherwise, the interpreter prints an error message.
*** how nested lists are handled?
from left to right. skip lists that are quoted. the list nested inside a quoted list, whether quoted or not, are not evaluated.
   The final complication is this: if the function that the Lisp
interpreter is looking at is not a special form, and if it is part of a
list, the Lisp interpreter looks to see whether the list has a list
inside of it.  If there is an inner list, the Lisp interpreter first
figures out what it should do with the inside list, and then it works on
the outside list.  If there is yet another list embedded inside the
inner list, it works on that one first, and so on.  It always works on
the innermost list first.  The interpreter works on the innermost list
first, to evaluate the result of that list.  The result may be used by
the enclosing expression.

see C-h i => elisp intro => List Processing => Lisp Interpreter => complications
*** are lists in elisp zero-based or one-based?
zero-based
e.g.,
     (nth 0 '("one" "two" "three"))
         => "one"

     (nth 1 '("one" "two" "three"))
         => "two"
*** what are the elisp data types?
**** integer
**** floating point
**** character
**** symbol
**** sequence
***** list
***** array
Vectors can hold elements of any type, whereas string elements must be characters, and bool-vector elements must be `t' or `nil'.  Char-tables are like vectors except that they are indexed by any valid character code.
****** strings
****** vectors
****** char-tables
****** bool-vectors
*** what's nil?
It is a *unique* object that refers to the empty list `()'.
*** what's a symbol?
A symbol can have both a function definition and a value attached to
it at the same time.  Or it can have just one or the other.  The two
are separate.
Another way to think about this is to imagine a symbol as being a
chest of drawers.  The function definition is put in one drawer, the
value in another, and so on.  What is put in the drawer holding the
value can be changed without affecting the contents of the drawer
holding the function definition, and vice-verse.
*** define a variable using set or setq
     (set 'carnivores '(lion tiger leopard))
     (setq carnivores '(lion tiger leopard))

     'carnivores means the address of the symbol carnivores, instead of carnivores (which is the value of that is bound to symbol carnivores)
     setq accepts multiple variable-value pairs. The first argument is bound to the value of the second
argument, the third argument is bound to the value of the fourth argument, and so on.  For example, you could use the following to assign a list of trees to the symbol `trees' and a list of herbivores to the symbol `herbivores':

     (setq trees '(pine fir oak maple)
           herbivores '(gazelle antelope zebra))
*** how to byte-compile a code?
byte-compile-file
compiled file are in .elc rather than .el
** common functions
*** arithmetic operations
   (+ 4 5 1)
   (- 9 2)
   (- 9 2 3)
   (* 2 3)
   (* 2 3 2)
   (/ 7 2)
   (/ 7 2.0)
   (% 7 4)
*** list operations
**** how to construct a list
     we can use cons to prepend one by one
     (cons 'buttercup ())
	  => (buttercup)

     (cons 'daisy '(buttercup))
	  => (daisy buttercup)

     (cons 'violet '(daisy buttercup))
	  => (violet daisy buttercup)

     (cons 'rose '(violet daisy buttercup))
	  => (rose violet daisy buttercup)
**** how to prepend a list
    (cons 'violet '(daisy buttercup))
	  => (violet daisy buttercup)
**** how to find out the length of a list?
     (length ())
	  => 0

     (length '(buttercup))
	  => 1

     (length '(daisy buttercup))
	  => 2

     (length (cons 'violet '(daisy buttercup)))
	  => 3

**** what do you get from continuing "cdr" a list?
nil, this means an empty list. but it will not be shown as "()"
     (cdr '(fir oak maple))
          => (oak maple)

     (cdr '(oak maple))
          =>(maple)

     (cdr '(maple))
          => nil

     (cdr 'nil)
          => nil

     (cdr ())
          => nil
**** how to continue "cdr"ing a list?
     (nthcdr 2 '(pine fir oak maple))
          => (oak maple)

which is the same as 
     (cdr (cdr '(pine fir oak maple)))
          => (oak maple)
**** how to get the nth element of a list?
The `nth' function takes the CAR of the result returned by `nthcdr'.  It returns
the Nth element of the list.
(nth 1 '("one" "two" "three"))
         => "two"

**** how to change a list?
"setcar" changes the car (first element) of the list and return the new car (first element).
(setq animals '(antelope giraffe lion tiger))
animals
          => (antelope giraffe lion tiger)
(setcar animals 'hippopotamus)
animals
          => (hippopotamus giraffe lion tiger)

"setcdr" changes the second and subsequent elements of a list
(setq domesticated-animals '(horse cow sheep goat))
domesticated-animals
          => (horse cow sheep goat)
(setcdr domesticated-animals '(cat dog))
domesticated-animals
          => (horse cat dog)
The CDR of the list is changed from `(cow sheep goat)' to
`(cat dog)'.

*** string operations
**** how to concatenate two strings
(concat "foo" "bar") # this is preferred since it's shorter
or
(concatenate 'string "foo" "bar")
here 'string is special "sequence type name"
or
(format "%s%s" "foo" "bar")
(format "%s/%s" org-base-path "notes.org")
*** buffer and file
**** how to expand file name
(expand-file-name "~/smcho/time")
**** how to get the file name of the current buffer
(buffer-file-name)
**** how to get the buffer name of the current buffer
(buffer-name)
**** how to get the size of current buffer
(buffer-size)
**** how to jump to a certain location in the buffer?
(goto-char (/ (+ (point-max) (point-min)) 2))
**** how to switch to another buffer
(switch-to-buffer (other-buffer (current-buffer) t))
In this case, the first argument to `other-buffer' tells it which
buffer to skip--the current one--and the second argument tells
`other-buffer' it is OK to switch to a visible buffer.

***** set-buffer vs switch-to-buffer
`switch-to-buffer' is designed for humans and does two different
things: it switches the buffer to which Emacs's attention is directed;
and it switches the buffer displayed in the window to the new buffer.
`set-buffer', on the other hand, does only one thing: it switches the
attention of the computer program to a different buffer.  The buffer on
the screen remains unchanged (of course, normally nothing happens there
until the command finishes running).

**** how to get the current location in the buffer
(point)
**** how to get the minimum and maximum permissible location in a narrowed buffer?
(point-min) and (point-max)
*** function
**** how to define a function
(defun FUNCTION-NAME (ARGUMENTS...)
       "OPTIONAL-DOCUMENTATION..."
       (interactive ARGUMENT-PASSING-INFO)     ; optional
       BODY...)

interactive is a special form that make the function interactive so that you can use it by typing 'M-x' and then the name of the function; or by typing an appropriate key or keychord.

(defun multiply-by-seven (number)
       "Multiply NUMBER by seven."
       (* 7 number))

the documentation string is what you see by using C-h f
**** what's special about interactive function?
1. you can invoke by using M-x and then the funtion name
2. the value returned is not automatically displayed in the echo area
**** how to define interactive function?
     (defun multiply-by-seven (number)       ; Interactive version.
       "Multiply NUMBER by seven."
       (interactive "p")
       (message "The result is %d" (* 7 number)))

The `"p"' tells Emacs to pass the prefix argument to the
function and use its value for the argument of the function.
**** how to pass prefix argument to interactive function?
C-u 3 M-x function (if you type `C-u' without a number, it defaults to 4)
or
M-3 M-x function
**** what are the code names for interactive functions?
(elisp)Top => Command Loop => Defining Commands => Interactive Codes

**** how to parse multiple arguments to a function?
(interactive "p\ncZap to char: ")
More formally, a function with two or more arguments can have
information passed to each argument by adding parts to the string that
follows `interactive'.  When you do this, the information is passed to
each argument in the same order it is specified in the `interactive'
list.  In the string, each part is separated from the next part by a
`\n', which is a newline.  For example, you can follow `p' with a `\n'
and an `cZap to char: '.  This causes Emacs to pass the value of the
prefix argument (if there is one) and the character.

*** number operations
**** how to increment nth number of a list
(setq numbers '(10 11 12))
(incf (nth 2 numbers))
numbers => (10 11 13)

this is the same as
(setf (nth 2 numbers) (1+ (nth 2 numbers)))
** exercise
*** 7.7
(setq birds '(robin sparrow hawk goose))
birds ==> (robin sparrow hawk goose)
(cons 'birds birds)
(brids robin sparrow hawk goose)
(setcar birds 'salmon)
birds ==> (salmon sparrow hawk goose)
(setcdr birds '(tilapia whales beluga stingray))
birds ==> (salmon tilapia whales beluga stingray)
** write a function
   (defun double (arg)
   "double value"
   (interactive "p")
   (message "%d" (+ arg arg)))
   (double 3)

   (defun testfill (arg)
   "test fill column"
   (interactive "p")
   (if (> fill-column arg)
   (message "no smaller")
   (message "yes greater")))


   (defun test-buffer (buf)
   "test buffer"
   (interactive (list (read-buffer "which buffer: " (other-buffer (current-buffer) t))))
   (if (get-buffer buf)
   (message "buffer exist")
   (message "buffer doesn't exist")
   )
   )

   (defun simplify-end-of-buffer()
   (interactive)
   (push-mark)
   (goto-char (point-max)))
* programming languages
** useful programming techniques
*** align code vertically
M-x align-regxp
then
put your delimiter
** speedbar for code browsing
M-x speedbar
f: file mode
b: buffer mode
<space>: unfold current item
** html
*** use xhtml mode which is a derivative of sgml mode (for XML)
   C-c C-f jump to the matched tag (one can press the same button multiple times to skip multiple tags)
   C-c C-b jump back
   C-c C-v view in w3m
** xml
   C-c C-t     sgml-tag (insert new element)
** R (EMMS)
   C-c C-r ess-eval-region
   C-c C-j ess-eval-line
   M-x R start R session
** Python mode:
   C-j: Insert a new line with the same indentation level as the current line
   RET: Insert a new line with the same indentation level as the current line
   C-M-a: Go to the beginning of the current function or class
   C-M-e: Go to the end of the current function or class
   C-M-h: Mark the current function or class for copying, etc.
   C-M-x: Execute the current function or class
   C-c C-b: Submit a bug report
   C-c C-c: Execute the buffer (i.e., the file being displayed)
   C-c C-d: Trace the stack of the process being executed
   C-c C-h: Get context-based help
   C-c TAB: Indent a highlighted (or marked) region
   C-c C-k: Mark a block of text. Using this at the head of a class or function definition will mark the entire block.
   C-c C-l: Shift the region to the left. If the cursor is in the middle of a region, the lower half of the region will shift.
   C-c RET: Execute the current file, opening a new window to show the output.
   C-c C-n: Jump to the next statement.
   C-c C-p: Jump to the previous statement.
   C-c C-r: Shift the region to the right. If the cursor is in the middle of a region, the lower half of the region will shift.
   C-c C-s: Execute a Python command.
   C-c C-t: Toggle shells
   C-c C-u: Go up one block
   C-c C-v: List the version of the Python mode
   C-c C-w: Run PyChecker
   C-c !: Open the Python interactive shell
   C-c #: Comment the highlighted (marked) region
   M-;      Comment/Uncomment depending on context
   C-c :: Check the indentation off-set
   C-c <: Shift the region to the left
   C-c >: Shift the region to the right
   C-c ?: Show Python mode documentation
   C-c |: Execute the highlighted (marked) part of the current program.
*** 执行
    C-c ! or M-x py-shell 调用 ipython shell
*** 移动
    C-j	 newline-and-indent
    RET	 newline
    C-M-a beginning-of-defun
    C-M-e end-of-defun
    C-c C-u: Go up one block
    C-c C-n: Jump to the next statement.
    C-c C-p: Jump to the previous statement.
*** mark
    C-M-h: Mark the current function or class for copying, etc.
    C-c C-k: Mark a block of text. Using this at the head of a class or function definition will mark the entire block.
*** 递交bug
    C-c C-b: Submit a bug report
    C-c C-v: List the version of the Python mode
*** 执行
    C-M-x: Execute the current function or class
    C-c C-s: Execute a Python command.
    C-c C-t: Toggle shells
    C-c C-d: Trace the stack of the process being executed
    C-c C-c: Execute the buffer (i.e., the file being displayed)
    C-c C-w: Run PyChecker
    C-c !: Open the Python interactive shell
    C-c RET: Execute the current file, opening a new window to show the output.
*** 注释
    C-c #: Comment the highlighted (marked) region
*** 缩进
    C-c :: Check the indentation off-set
    C-c <: Shift the region to the left
    C-c >: Shift the region to the right
    C-c TAB: Indent a highlighted (or marked) region
    C-c C-l: Shift the region to the left. If the cursor is in the middle of a region, the lower half of the region will shift.
    C-c C-r: Shift the region to the right. If the cursor is in the middle of a region, the lower half of the region will shift.
*** 帮助
    C-c ?: Show Python mode documentation (DOESN'T WORK)
    C-c C-h: Get context-based help
*** 其他
    C-c |: Execute the highlighted (marked) part of the current program. 
    incremental movement can use C-n+C-l or C-p+C-l
** CC mode
   1. C-M-h c-mark-function 选中当前函数
   2. C-M-a C-M-e go to start/end of the current function
   3. C-M-f C-M-b go to the end/start of the {} block
   4. M-a M-e go to start/end of current statement
   5. M-x c-macro-expand expand the macro in current region in another window
      CC mode 下 C-c C-c 可以comment从mark开始的所有行
   6. etags *.c *.h generate TAGS file
   7. M-. find-tag
   8. M-x find-tag-regexp
   9. M-0 M-. take you to the next hit of the previous use of M-x find-tag-regexp
   10. (setq tags-table-list '("~/lib" "~/src/lib" "~/common")) set emacs tag table
   11. C-x 4 a OR M-x add-change-log-entry 添加changelog (change log)
   12. M-x compile
   13. make -k (The -k switch will prevent make from halting on an error which has no bearing on other targets in the makefile.)
   14. (setq compile-command "make")
   15. C-c C-k kill the compilation process
   16. C-c C-c (or mouse-2) jump from the error message to source code
   17. M-n next error
   18. (define-key c-mode-map "\M-n" 'next-error)

   C-c C-l toggle eletric indentation the 'l' in 'C/l' means electric flag, it can be disabled from start by (setq-default c-electric-flag nil)

   (defun my-make-CR-do-indent ()
   (define-key c-mode-base-map "\C-m" 'c-context-line-break))
   (add-hook 'c-initialization-hook 'my-make-CR-do-indent)

   C-x ;	Set comment column
   M-x comment-region
   M-x uncomment-region
   Add or remove comment delimiters on all the lines in the region.
   note that M-; does the same job sometimes


   M-;      insert comment in the current line.
   C-u M-;     kill comment in the current line.

   C-x 5 d: dired in another frame
   C-c C-q reindent
   C-s <enter> word 搜索
   M-w 复制
* utilities
** eshell
   1. C-c C-k 杀进程，相当于bash下的C-c
   2. M-! run single shell command
   3. M-| run shell command on region
      select a region, M-| wc -w <Ret> gives you the number of word counted in the region
   4. C-u M-x eshell run another eshell
   5. M-x term: terminal emulator in emacs
   6. eshell is in elisp and shell is in C
      see following for a discussion of the difference between the two:
      http://xahlee.org/emacs/eshell.html
   under terminal mode you need to substitute "C-x something" with "C-c C-x something"
   C-c C-k: switch to char mode
   C-c C-j: switch to line mode
   C-c C-q: toggle the page-at-a-time feature
** yasnippet
*** reload all the snippet without exiting emacs
    M-x yas-reload-all
*** no indentation after <TAB>
(setq yas/indent-line nil)

** dired mode
*** navigation
    | C-o     | open file in another window but do not select   |
    | f       | open file                                       |
    | ^       | parent directory                                |
    | mouse-2 | equivalent to o                                 |
    | C-x d   | invoke dired                                    |
    | g       | update the dired buffer                         |
    | s       | toggle between alphabetical and date/time order |
    | j       | go to the some file specified                   |
    | $       | show/hide subdirectory                          |
    | R       | rename the file with new filename.              |
    | C       | copy the file to the new location.              |
    | i       | add subdirectory                                |
    | l       | update subdirectory content                     |
    | q       | quit-window                                     |
    | v       | dired-view-file                                 |
*** directory operation
    | +   | dired-create-directory                              |
    | d   | set deletion flag                                   |
    | x   | execute deletion                                    |
    | u   | unset deletion flag                                 |
    | #   | set deletion flag on all auto-save files            |
    | ~   | set deletion flag on all backup files               |
    | .   | set deletion flag for backup files                  |
    | &   | set deletion flag for certain files produced by TeX |
    | % d | : set deletion flag using reg-exp                   |
*** search
**** limit search only to the filenames
     (setq dired-isearch-filenames t)
** dired-x mode
   C-x C-j dired-jump, jump to dired buffer corresponding to current buffer
** emacs client
   参见http://draptik.wordpress.com/2009/10/23/emacsclient-usage-on-a-gnulinux-system/
   Add this to your ~/.bashrc:
   export ALTERNATE_EDITOR=emacs EDITOR=emacsclient VISUAL=emacsclient
   
   ## you can always use the command "emacs" instead of "emacsclient -c"
   alias emacs='emacsclient -c'
   Add this to your ~/.emacs:
   (server-start)
   Add this to your system startup options:
   /path/to/your/emacs --daemon
   /usr/bin/emacs --daemon
   Gnome panel starter:
   /usr/bin/emacsclient -c'
*** 关闭emacs daemon
    M-x save-buffers-kill-emacs
    M-x kill-emacs
** svn
*** add following into .emacs
   (define-key minibuffer-local-map [f3]
   (lambda() (interactive) (insert (buffer-file-name (nth 1 (buffer-list)))))
*** run
    M-! svn add F3
** bookmarks
   • ‘C-x r m’ – set a bookmark at the current location (e.g. in a file)
   • ‘C-x r b’ – jump to a bookmark
   • ‘C-x r l’ – list all of your bookmarks
   • ‘M-x bookmark-delete’ – delete a bookmark by name
** gnus (email)
   记住在*group*里面按AA，显示所有可订阅的东西。
   C-d 显示带!的邮件。
   C-d是gnus-summary-enter-digest-group
   http://www.ibm.com/developerworks/cn/linux/l-cn-emacsgnus/index.html
**** summary状态
    g :show article
    R 已读
    r 手工标记为已读(用d)
    O 老帖
    ! 保留标记
    ? 休眠标记
    如果需要移动多个邮件，则可以把它们都标记为 #(gnus-summary-mark-as-processable) ，然后再输入
    B m(gnus-summary-move-article)。如果有一个消息标记错了，则可以用 M-#
    (gnus-summary-unmark-as-processable) 来取消。如果要取消所有已经标记成 #的消息，用命令 M P U
(gnus-summary-unmark-all-processable) 即可。
**** article和summary命令 
     C-c C-c   发送正在编写的稿件         
     C-c C-d   把当前编辑的稿件保存为草稿 
     C-c C-k   删除当前正在编写的稿件     
     C-c C-m f 粘贴附件                   
     q 退出 回到group
     c 全部未读标记为已读
     m 创建新邮件
     R/r 回复
     B Del删除邮件
     u 标记!
     d (gnus-summary-mark-as-read-forward)
     D (gnus-summary-mark-as-read-backward)
     标记为已读，或取消!
     /o (gnus-summary-insert-old-articles &optional ALL) 查阅已读邮件 
     M-g (gnus-summary-rescan-group)
     l (gnus-summary-goto-last-article)
**** 小教程
     在 *Group* 缓冲区里，用命令 AA可以列出所有的新闻组列表，如图 2 所示：


     图 2. Gnus 显示的新闻组列表清单
     图 2. Gnus 显示的新闻组列表清单

     如果想订阅某个新闻组，只要把光标放到你想要订阅的新闻组上，用命令 u就可以订阅该
     新闻组了。

     订阅完了你需要的新闻组后，按 L则可以回到普通的 *Group* 缓冲区里；如果你只需要
     Gnus 显示包含有未读邮件或文章的组，则用小写的 l即可。

     如果你读了一段时间，觉得这个新闻组对你来说没有价值了，按 u则可以退订该新闻组。

     这里值得提醒的是，当你按 u来退订某个新闻组时，并没有把它从你的列表里删除，只是
     让它处于“僵尸”状态（即哪怕有新的未读文章出现，Gnus 也不会让它打扰你），而你用命
     令 L依然能在列表里看到它，只是前面标记了一个大写的 U符号。如果你想彻底把这个新
     闻组从 *Group* 列表里删除的话，则要用 C-k命令。
** w3m
   R reload
   
   w3m bookmarks: see C-h m for more information.
   a add book marks 
** emms usage
   see following for detail
   http://www.gnu.org/software/emms/README
   emms-start ...... Start playing the current playlist
   emms-stop ....... Stop playing
   emms-next ....... Go to the next track in the playlist
   emms-previous ... Go to the previous track in the playlist
   emms-shuffle .... Shuffle the playlist
   emms-show ....... What are you playing?
   emms-play-file ............. Play a single file
   emms-play-directory ........ Play a whole directory
   emms-play-directory-tree ... Play a directory tree
   to invoke a interactive playlist mode: M-x emms-playlist-mode-go
   in that interactive playlist mode:
   one can use:
   `n'....Start playing the next track in the playlist.
   `p'....Start playing the previous track in the playlist.
   `s'....Stop playing.
   `f'....Describe the currently playing track in the minibuffer.
   `c'....Display the current track in the center of the screen.
   `RET'..Start playing the track under point. Note that this is also available with `<mouse-2>'.
   `q'....Put the interactive playlist buffer at the end of the list of all buffers (ie. bury it).
** open browser related
   #!/usr/bin/emacs --script
   (setq process-connection-type nil);; pty's broken on the Mac

   (defun surf ()
   (progn
   (browse-url "http://news.ycombinator.com")
   (sleep-for 0.5);  We need a delay
   (browse-url "http://stackoverflow.com")
   ))
   ;;
   ;; This is what's going on behind the scenes
   ;;(setq url "http://www.google.com")
   ;;(start-process (concat "open " url) nil "open" url)

   (surf)
** look up wikipedia
  (defun lookup-wikipedia ()
  "Look up the word under cursor in Wikipedia.
This command generates a url for Wikipedia.com and switches you
to browser. If a region is active (a phrase), lookup that phrase."
 (interactive)
 (let (myword myurl)
   (setq myword
         (if (and transient-mark-mode mark-active)
             (buffer-substring-no-properties (region-beginning) (region-end))
           (thing-at-point 'symbol)))

  (setq myword (replace-regexp-in-string " " "_" myword))
  (setq myurl (concat "http://en.wikipedia.org/wiki/" myword))
  (browse-url myurl)
   ))
** look up dictionary
   (defun lookup-word-definition ()
   "Look up the current word's definition in a browser.
   If a region is active (a phrase), lookup that phrase."
   (interactive)
   (let (myword myurl)
   (setq myword
          (if (and transient-mark-mode mark-active)
              (buffer-substring-no-properties (region-beginning) (region-end))
            (thing-at-point 'symbol)))

   (setq myword (replace-regexp-in-string " " "%20" myword))
   (setq myurl (concat "http://www.answers.com/main/ntquery?s=" myword))

   (browse-url myurl)
   ;; (w3m-browse-url myurl) ;; if you want to browse using w3m
    ))

    (global-set-key (kbd "<XF86Close>") 'lookup-word-definition)

*** dictionaries
    using sample word curlicue
    http://www.answers.com/main/ntquery?s=curlicue (AHD)
    http://en.wiktionary.org/wiki/curlicue (wiktionary)
    http://education.yahoo.com/reference/dictionary/entry/curlicue (AHD)
    http://m-w.com/dictionary/curlicue (Merriam Webster Collegiate)
    http://www.askoxford.com/concise_oed/curlicue (Compact Oxford Eng Dict )
    http://www.yourdictionary.com/curlicue (AHD)
    http://dictionary.reference.com/browse/curlicue (AHD, Random House, WordNet, ...)
    http://www.dict.org/bin/Dict?Form=Dict2&Database=*&Query=curlicue (Open Source Dicts)
** calendar, date, holiday, birthday...
;; Emacs Calender 
;;
;; Emacs 中有日历，而且可以称之为一个系统，因为其中除了最常用的日历之外，
;; 还有其他的近十种历法，其中有日记、约会提醒、纪念日提示以及节假日提示等
;; 等。其中的历法包括中国的农历、希伯来历、伊斯兰历、法国革命历、中美玛雅
;; 历等等，可以根据经纬度告知你的所在的每天日出日落的时间等等。
;; 
;; holiday-fixed m d	固定阳历节日， m 月 d 日
;; holiday-float m w n 浮动阳历节日， m 月的第 n 个星期 w%7
;;                     
;; ----------------------------------------------
;; .	跳回当前天
;; o	跳到某一个月
;; g d	跳到某年某月某日
;; g c	跳到某年某星期的星期几
;; g C	跳到阴历的某一天
;; p C	显示当前的阴历日期
;; h	显示当前节日
;; i d	加入当前这一天的日程安排
;; i w	加入每周这一天的日程安排
;; i m	加入每月这一天的日程安排
;; i y	加入每年这一天的日程安排
;; i a	加入周年纪念（anniversary），比如生日等
;; d	察看当前日期的diary
;; -----------------------------------------------
;;

;; (defun animals(birthyear)
;;   "Calculate the Chinese aninal by year"
;;   (let ((x (% (- 1997 birthyear) 12)))
;;     (cond ((or (= x 1) (= x -11))  "鼠")
;;           ((= x 0)                 "牛")
;;           ((or (= x 11) (= x -1))  "虎")
;;           ((or (= x 10) (= x -2))  "兔")
;;           ((or (= x 9) (= x -3))   "龙")
;;           ((or (= x 8) (= x -4))   "蛇")
;;           ((or (= x 7) (= x -5))   "马")
;;           ((or (= x 6) (= x -6))   "羊")
;;           ((or (= x 5) (= x -7))   "猴")
;;           ((or (= x 4) (= x -8))   "鸡")
;;           ((or (= x 3) (= x -9))   "狗")
;;           ((or (= x 2) (= x -10))  "猪")
;;           )
;;     )
;;   )


;; 保存日记的文件
;; (setq diary-file "~/emacs/data/diary")
;; (setq diary-mail-addr "guest@gmail.com")
;; (add-hook 'diary-hook 'appt-make-list)
;;appointment
;; (setq appt-issue-message t)

;; 设置所在地的经纬度和地名，calendar 中按 S，可以根据这些信息告知你每天的
;; 日出和日落的时间：
;; (setq calendar-latitude +29.97)
;; (setq calendar-longitude +95.35)
;; (setq calendar-location-name "Houston")

;; (setq calendar-remove-frame-by-deleting t)
;; (setq calendar-week-start-day 1)              ; 每周第一天是周一
;; ;; (setq mark-diary-entries-in-calendar t)       ; 标记有记录的日子
;; (setq mark-holidays-in-calendar t)            ; 标记节假日
;; (setq view-calendar-holidays-initially t)     ; 不显示节日列表

;;除去基督徒的节日、希伯来人的节日和伊斯兰教的节日。
;; (setq christian-holidays nil
;;       hebrew-holidays nil
;;       islamic-holidays nil
;;       solar-holidays nil
;;       bahai-holidays nil
;;       )

;; (setq general-holidays '((holiday-fixed 1 1   "元旦")
;;                          (holiday-fixed 2 14  "情人节")
;;                          (holiday-fixed 4 1   "愚人节")
;;                          (holiday-fixed 12 25 "圣诞节")
;;                          (holiday-fixed 10 1  "国庆节")
;;                          (holiday-float 5 0 2 "母亲节")   ;5月的第二个星期天
;;                          (holiday-float 6 0 3 "父亲节")
;;                          ))

;; (setq local-holidays '((holiday-chinese 1 15  "元宵节 (正月十五)")
;;                        (holiday-chinese 5 5   "端午节 (五月初五)")
;;                        (holiday-chinese 9 9   "重阳节 (九月初九)")
;;                        (holiday-chinese 8 15  "中秋节 (八月十五)")
;;                        ;; 生日
;;                        (birthday-fixed 1 20  "爸爸生日(1952)")
;;                        (birthday-fixed 6 27  "妈妈生日(1952)")
;; 		       (birthday-fixed 4 13  "崔勇同学生日(1985)")
;; 		       (birthday-fixed 5 11  "李力同学生日(1985)")
;; 		       (birthday-fixed 10 9  "阮哲超同学生日(1985)")
;; 		       (birthday-fixed 10 31 "郑砾恒同学生日(1984)")
;;                        ))

;;下面两个是设置年份为中国年，好像默认的是用英文写的，由王垠修改的。 
;;这个设置在节日列表的春节那天能看到。
(setq chinese-calendar-celestial-stem
      ["甲" "乙" "丙" "丁" "戊" "己" "庚" "辛" "壬" "癸"])
(setq chinese-calendar-terrestrial-branch
      ["子" "丑" "寅" "卯" "辰" "巳" "午" "未" "申" "酉" "戌" "亥"])

;; (setq mark-diary-entries-in-calendar t
;;       appt-issue-message nil
;;       mark-holidays-in-calendar t
;;       view-calendar-holidays-initially nil)

;; (setq diary-date-forms '((year "/" month "/" day "[^/0-9]"))
;;       calendar-date-display-form '(year "/" month "/" day)
;;       calendar-time-display-form
;;       '(24-hours ":" minutes (if time-zone " (") time-zone (if time-zone ")")))

(add-hook 'today-visible-calendar-hook 'calendar-mark-today)

(autoload 'chinese-year "cal-china" "Chinese year data" t)

(defun holiday-chinese (cmonth cday string)
  "Chinese calendar holiday, month and day in Chinese calendar (CMONTH, CDAY).

If corresponding MONTH and DAY in gregorian calendar is visible,
the value returned is the list \(((MONTH DAY year) STRING)).
Returns nil if it is not visible in the current calendar window."
  (let* ((m displayed-month)
	 (y displayed-year)
	 (gdate (calendar-gregorian-from-absolute
		 (+ (cadr (assoc cmonth (chinese-year y))) (1- cday))))
	 (gm (car gdate))
	 (gd (cadr gdate))
	 (gy (caddr gdate)))
    (increment-calendar-month m y (- 11 gm))
    (if (> m 9)
        (list (list (list gm gd gy) string)))))

(defun birthday-fixed (month day string)
  "Holiday on MONTH, DAY (Gregorian) called STRING.
If MONTH, DAY is visible, the value returned is the list (((MONTH DAY year)
STRING)).  Returns nil if it is not visible in the current calendar window."
  (let ((m displayed-month)
        (y displayed-year)
        (animal (animals (string-to-number (nth 1 (split-string string "(")))))
        )
    (increment-calendar-month m y (- 11 month))
    (if (> m 9)
      (list (list (list month day y) string animal)))))
* help
  C-h i read online documentation (manual)
  C-h m will show information on the current major mode.
  C-c C-h shows all bindings that start with C-c
  C-h b shows all bindings currently available.
  
  while reading the *info*:
  u goes uplevel
  q quit
  n next node
  p previous node
  l go backward in history
  r go forward in history after using l
  L go to a menu of visited nodes
  
  C-h r	info-emacs-mannual
  C-h c	describe-key-briefly
  C-h f 查看函数
  C-h k describe-key
  C-h a search keywords and patterns
  m   	search menus
** file encoding
usually the encoding is recognized automatically, if you see 乱码, it means the encoding might have some problem. you need to specify the encoding yourself. 
the most commonly used one is: utf-8
C-x Ret r change the encoding the current buffer
*** how to change file encoding while saving
C-x C-m f change the default encoding of the file while saving
* trouble shooting and FAQ
** 不重新启动emacs就使.emacs起作用的三种方法
   1，C-x C-e 光标前面的句子立即被evaluate，立即生效
   2，选择一个region M-x eval-region
   3, M-x load-file ~/.emacs
   4, M-x eval-buffer
   测试：(setq frame-title-format "emacs@%b")
** fix auctex incompatible with emacs24 issue
   install auctex from package install of emacs 24

** 和vim比较
   basic editting
   http://www.wlindley.com/gnu/vi.htm
